"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatMappingsHeader = formatMappingsHeader;
exports.formatTypedMappings = formatTypedMappings;
exports.formatAmbiguitySectionHeader = formatAmbiguitySectionHeader;
exports.formatAmbiguousMappings = formatAmbiguousMappings;
const chalk = require("chalk");
const format_1 = require("./format");
const format_table_1 = require("./format-table");
function formatMappingsHeader(stream) {
    const formatter = new format_1.Formatter(stream, {});
    formatter.printSectionHeader('The following resources were moved or renamed:\n');
}
function formatTypedMappings(stream, mappings, env) {
    const header = [['Resource Type', 'Old Construct Path', 'New Construct Path']];
    const rows = mappings.map((m) => [m.type, m.sourcePath, m.destinationPath]);
    const formatter = new format_1.Formatter(stream, {});
    formatter.print(`${env}:`);
    if (mappings.length > 0) {
        formatter.print(chalk.green((0, format_table_1.formatTable)(header.concat(rows), undefined)));
    }
    else {
        formatter.print('Nothing to refactor.');
    }
    formatter.print(' ');
}
function formatAmbiguitySectionHeader(stream) {
    const formatter = new format_1.Formatter(stream, {});
    formatter.printSectionHeader('Ambiguous Resource Name Changes:\n');
}
function formatAmbiguousMappings(stream, pairs, env) {
    const tables = pairs.map(renderTable);
    const formatter = new format_1.Formatter(stream, {});
    formatter.print(`${env}:`);
    formatter.print(tables.join('\n\n'));
    formatter.printSectionFooter();
    function renderTable([removed, added]) {
        return (0, format_table_1.formatTable)([['', 'Resource'], renderRemoval(removed), renderAddition(added)], undefined);
    }
    function renderRemoval(locations) {
        return [chalk.red('-'), chalk.red(renderLocations(locations))];
    }
    function renderAddition(locations) {
        return [chalk.green('+'), chalk.green(renderLocations(locations))];
    }
    function renderLocations(locs) {
        return locs.join('\n');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwcGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtYXBwaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVVBLG9EQUdDO0FBRUQsa0RBWUM7QUFFRCxvRUFHQztBQUVELDBEQTJCQztBQTdERCwrQkFBK0I7QUFDL0IscUNBQXFDO0FBQ3JDLGlEQUE2QztBQVE3QyxTQUFnQixvQkFBb0IsQ0FBQyxNQUE2QjtJQUNoRSxNQUFNLFNBQVMsR0FBRyxJQUFJLGtCQUFTLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO0FBQ25GLENBQUM7QUFFRCxTQUFnQixtQkFBbUIsQ0FBQyxNQUE2QixFQUFFLFFBQXdCLEVBQUUsR0FBVztJQUN0RyxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsZUFBZSxFQUFFLG9CQUFvQixFQUFFLG9CQUFvQixDQUFDLENBQUMsQ0FBQztJQUMvRSxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUU1RSxNQUFNLFNBQVMsR0FBRyxJQUFJLGtCQUFTLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUN4QixTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBQSwwQkFBVyxFQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7U0FBTSxDQUFDO1FBQ04sU0FBUyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFDRCxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLENBQUM7QUFFRCxTQUFnQiw0QkFBNEIsQ0FBQyxNQUE2QjtJQUN4RSxNQUFNLFNBQVMsR0FBRyxJQUFJLGtCQUFTLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0FBQ3JFLENBQUM7QUFFRCxTQUFnQix1QkFBdUIsQ0FDckMsTUFBNkIsRUFDN0IsS0FBNkIsRUFDN0IsR0FBVztJQUVYLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxrQkFBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUU1QyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUMzQixTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNyQyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUUvQixTQUFTLFdBQVcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQXVCO1FBQ3pELE9BQU8sSUFBQSwwQkFBVyxFQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ25HLENBQUM7SUFFRCxTQUFTLGFBQWEsQ0FBQyxTQUFtQjtRQUN4QyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELFNBQVMsY0FBYyxDQUFDLFNBQW1CO1FBQ3pDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsU0FBUyxlQUFlLENBQUMsSUFBYztRQUNyQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tICcuL2Zvcm1hdCc7XG5pbXBvcnQgeyBmb3JtYXRUYWJsZSB9IGZyb20gJy4vZm9ybWF0LXRhYmxlJztcblxuZXhwb3J0IGludGVyZmFjZSBUeXBlZE1hcHBpbmcge1xuICByZWFkb25seSB0eXBlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHNvdXJjZVBhdGg6IHN0cmluZztcbiAgcmVhZG9ubHkgZGVzdGluYXRpb25QYXRoOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRNYXBwaW5nc0hlYWRlcihzdHJlYW06IE5vZGVKUy5Xcml0YWJsZVN0cmVhbSkge1xuICBjb25zdCBmb3JtYXR0ZXIgPSBuZXcgRm9ybWF0dGVyKHN0cmVhbSwge30pO1xuICBmb3JtYXR0ZXIucHJpbnRTZWN0aW9uSGVhZGVyKCdUaGUgZm9sbG93aW5nIHJlc291cmNlcyB3ZXJlIG1vdmVkIG9yIHJlbmFtZWQ6XFxuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRUeXBlZE1hcHBpbmdzKHN0cmVhbTogTm9kZUpTLldyaXRhYmxlU3RyZWFtLCBtYXBwaW5nczogVHlwZWRNYXBwaW5nW10sIGVudjogc3RyaW5nKSB7XG4gIGNvbnN0IGhlYWRlciA9IFtbJ1Jlc291cmNlIFR5cGUnLCAnT2xkIENvbnN0cnVjdCBQYXRoJywgJ05ldyBDb25zdHJ1Y3QgUGF0aCddXTtcbiAgY29uc3Qgcm93cyA9IG1hcHBpbmdzLm1hcCgobSkgPT4gW20udHlwZSwgbS5zb3VyY2VQYXRoLCBtLmRlc3RpbmF0aW9uUGF0aF0pO1xuXG4gIGNvbnN0IGZvcm1hdHRlciA9IG5ldyBGb3JtYXR0ZXIoc3RyZWFtLCB7fSk7XG4gIGZvcm1hdHRlci5wcmludChgJHtlbnZ9OmApO1xuICBpZiAobWFwcGluZ3MubGVuZ3RoID4gMCkge1xuICAgIGZvcm1hdHRlci5wcmludChjaGFsay5ncmVlbihmb3JtYXRUYWJsZShoZWFkZXIuY29uY2F0KHJvd3MpLCB1bmRlZmluZWQpKSk7XG4gIH0gZWxzZSB7XG4gICAgZm9ybWF0dGVyLnByaW50KCdOb3RoaW5nIHRvIHJlZmFjdG9yLicpO1xuICB9XG4gIGZvcm1hdHRlci5wcmludCgnICcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0QW1iaWd1aXR5U2VjdGlvbkhlYWRlcihzdHJlYW06IE5vZGVKUy5Xcml0YWJsZVN0cmVhbSkge1xuICBjb25zdCBmb3JtYXR0ZXIgPSBuZXcgRm9ybWF0dGVyKHN0cmVhbSwge30pO1xuICBmb3JtYXR0ZXIucHJpbnRTZWN0aW9uSGVhZGVyKCdBbWJpZ3VvdXMgUmVzb3VyY2UgTmFtZSBDaGFuZ2VzOlxcbicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0QW1iaWd1b3VzTWFwcGluZ3MoXG4gIHN0cmVhbTogTm9kZUpTLldyaXRhYmxlU3RyZWFtLFxuICBwYWlyczogW3N0cmluZ1tdLCBzdHJpbmdbXV1bXSxcbiAgZW52OiBzdHJpbmcsXG4pIHtcbiAgY29uc3QgdGFibGVzID0gcGFpcnMubWFwKHJlbmRlclRhYmxlKTtcbiAgY29uc3QgZm9ybWF0dGVyID0gbmV3IEZvcm1hdHRlcihzdHJlYW0sIHt9KTtcblxuICBmb3JtYXR0ZXIucHJpbnQoYCR7ZW52fTpgKTtcbiAgZm9ybWF0dGVyLnByaW50KHRhYmxlcy5qb2luKCdcXG5cXG4nKSk7XG4gIGZvcm1hdHRlci5wcmludFNlY3Rpb25Gb290ZXIoKTtcblxuICBmdW5jdGlvbiByZW5kZXJUYWJsZShbcmVtb3ZlZCwgYWRkZWRdOiBbc3RyaW5nW10sIHN0cmluZ1tdXSkge1xuICAgIHJldHVybiBmb3JtYXRUYWJsZShbWycnLCAnUmVzb3VyY2UnXSwgcmVuZGVyUmVtb3ZhbChyZW1vdmVkKSwgcmVuZGVyQWRkaXRpb24oYWRkZWQpXSwgdW5kZWZpbmVkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbmRlclJlbW92YWwobG9jYXRpb25zOiBzdHJpbmdbXSkge1xuICAgIHJldHVybiBbY2hhbGsucmVkKCctJyksIGNoYWxrLnJlZChyZW5kZXJMb2NhdGlvbnMobG9jYXRpb25zKSldO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVyQWRkaXRpb24obG9jYXRpb25zOiBzdHJpbmdbXSkge1xuICAgIHJldHVybiBbY2hhbGsuZ3JlZW4oJysnKSwgY2hhbGsuZ3JlZW4ocmVuZGVyTG9jYXRpb25zKGxvY2F0aW9ucykpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbmRlckxvY2F0aW9ucyhsb2NzOiBzdHJpbmdbXSkge1xuICAgIHJldHVybiBsb2NzLmpvaW4oJ1xcbicpO1xuICB9XG59XG4iXX0=